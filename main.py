# ============================================================
# Extraction de donn√©es de crypto-monnaies avec Selenium
# Auteur : KELLA OMAR
# Inspir√© du d√©p√¥t Praveen76 / Web-Scraping-using-Selenium-Python
# ============================================================

# --- Importation des biblioth√®ques n√©cessaires ---
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
import pandas as pd
import time
import os


chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--window-size=1920,1080")

# üëá Cette ligne t√©l√©charge et configure automatiquement le bon driver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

# --- √âtape 2 : Acc√®s au site CoinMarketCap ---
url = "https://coinmarketcap.com/"
driver.get(url)

print("Chargement de la page CoinMarketCap...")
time.sleep(5)  # temps d‚Äôattente pour le chargement complet de la page

# --- √âtape 3 : Extraction des lignes du tableau ---
# Chaque crypto est dans une balise <tr> du tableau principal
rows = driver.find_elements(By.XPATH, '//tbody/tr')

cryptos_data = []

# --- √âtape 4 : Parcours et extraction des informations ---
for row in rows[:20]:  # on limite √† 20 premi√®res cryptos
    try:
        name = row.find_element(By.XPATH, './td[3]//p[contains(@class,"coin-item-symbol")]').text
        full_name = row.find_element(By.XPATH, './td[3]//p[contains(@class,"coin-item-name")]').text
        price = row.find_element(By.XPATH, './td[4]').text
        change_24h = row.find_element(By.XPATH, './td[5]').text
        volume_24h = row.find_element(By.XPATH, './td[7]').text
        market_cap = row.find_element(By.XPATH, './td[8]').text

        cryptos_data.append({
            "Nom": full_name,
            "Symbole": name,
            "Prix": price,
            "Variation_24h": change_24h,
            "Volume_24h": volume_24h,
            "Capitalisation": market_cap
        })
    except Exception as e:
        print(f"Erreur lors de l‚Äôextraction d‚Äôune ligne : {e}")

# --- √âtape 5 : Fermeture du navigateur ---
driver.quit()

# --- √âtape 6 : Sauvegarde dans un fichier CSV ---
if not os.path.exists("data"):
    os.mkdir("data")

df = pd.DataFrame(cryptos_data)
df.to_csv("data/cryptos_data.csv", index=False, encoding="utf-8-sig")

print("\n Extraction termin√©e avec succ√®s !")
print("Donn√©es enregistr√©es dans : data/cryptos_data.csv")

# --- √âtape 7 : Aper√ßu des donn√©es ---
print(df.head(10))
